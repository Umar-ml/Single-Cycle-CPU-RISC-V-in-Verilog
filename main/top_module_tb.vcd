$date
	Fri Feb 21 18:40:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module top_module_tb $end
$var wire 32 ! instruction [31:0] $end
$var reg 1 " clk $end
$var reg 32 # pc_next [31:0] $end
$var reg 1 $ pc_write $end
$var reg 1 % rst $end
$scope module uut $end
$var wire 1 " clk $end
$var wire 32 & pc_next [31:0] $end
$var wire 1 $ pc_write $end
$var wire 1 % rst $end
$var wire 32 ' pc_out [31:0] $end
$var wire 32 ( instruction [31:0] $end
$scope module imem $end
$var wire 32 ) instruction [31:0] $end
$var wire 32 * addr [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 " clk $end
$var wire 32 + pc_next [31:0] $end
$var wire 1 $ pc_write $end
$var wire 1 % rst $end
$var reg 32 , pc_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 ,
b0 +
b0 *
b110000000000000010010011 )
b110000000000000010010011 (
b0 '
b0 &
1%
0$
b0 #
0"
b110000000000000010010011 !
$end
#5000
1"
#10000
0"
0%
#15000
1"
#20000
0"
b100 #
b100 &
b100 +
1$
#25000
b10100000000000100010011 !
b10100000000000100010011 (
b10100000000000100010011 )
b100 '
b100 *
b100 ,
1"
#30000
0"
b1000 #
b1000 &
b1000 +
#35000
b1000001000000110110011 !
b1000001000000110110011 (
b1000001000000110110011 )
b1000 '
b1000 *
b1000 ,
1"
#40000
0"
b1100 #
b1100 &
b1100 +
#45000
b11100000000001000010011 !
b11100000000001000010011 (
b11100000000001000010011 )
b1100 '
b1100 *
b1100 ,
1"
#50000
0"
b10000 #
b10000 &
b10000 +
#55000
b1100100000001010110011 !
b1100100000001010110011 (
b1100100000001010110011 )
b10000 '
b10000 *
b10000 ,
1"
#60000
0"
#65000
1"
#70000
0"
