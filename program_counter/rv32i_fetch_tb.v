#include "Vrv32i_fetch.h"  // Generated by Verilator
#include "verilated.h"
#include "verilated_vcd_c.h"
#include <iostream>

#define SIM_TIME 200  // Total simulation time (in clock cycles)

int main(int argc, char** argv) {
    Verilated::commandArgs(argc, argv);  
    Vrv32i_fetch* top = new Vrv32i_fetch();  // Instantiate the Verilog module

    // Enable waveform generation
    Verilated::traceEverOn(true);
    VerilatedVcdC* trace = new VerilatedVcdC;
    top->trace(trace, 99);
    trace->open("waveform.vcd");

    // Initialize signals
    top->clk = 0;
    top->rst = 1;  // Apply reset

    // Simulation loop
    for (int i = 0; i < SIM_TIME; i++) {
        top->clk = !top->clk;  // Toggle clock
        top->eval();           // Evaluate the Verilog model

        if (i == 2) top->rst = 0;  // Deassert reset after 2 cycles

        // Print state every 2 cycles
        if (i % 2 == 0) {
            std::cout << "Cycle: " << i/2
                      << " | PC: " << std::hex << top->pc
                      << " | Instruction: " << std::hex << top->instruction
                      << std::endl;
        }

        trace->dump(i);
    }

    trace->close();
    delete top;
    return 0;
}

